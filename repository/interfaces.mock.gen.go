// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetUserByUserID mocks base method.
func (m *MockRepositoryInterface) GetUserByUserID(ctx context.Context, input GetUserByUserIDInput) (GetUserByUserIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUserID", ctx, input)
	ret0, _ := ret[0].(GetUserByUserIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUserID indicates an expected call of GetUserByUserID.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserByUserID(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUserID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserByUserID), ctx, input)
}

// GetUserPassword mocks base method.
func (m *MockRepositoryInterface) GetUserPassword(ctx context.Context, input GetUserPasswordInput) (GetUserPasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", ctx, input)
	ret0, _ := ret[0].(GetUserPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockRepositoryInterfaceMockRecorder) GetUserPassword(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockRepositoryInterface)(nil).GetUserPassword), ctx, input)
}

// InsertUser mocks base method.
func (m *MockRepositoryInterface) InsertUser(ctx context.Context, input UserInput) (UserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, input)
	ret0, _ := ret[0].(UserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryInterfaceMockRecorder) InsertUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertUser), ctx, input)
}

// UpdateSuccessLoginByUserID mocks base method.
func (m *MockRepositoryInterface) UpdateSuccessLoginByUserID(ctx context.Context, input UpdateSuccessLoginByUserIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuccessLoginByUserID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSuccessLoginByUserID indicates an expected call of UpdateSuccessLoginByUserID.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateSuccessLoginByUserID(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuccessLoginByUserID", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateSuccessLoginByUserID), ctx, input)
}

// UpdateUserByUserID mocks base method.
func (m *MockRepositoryInterface) UpdateUserByUserID(ctx context.Context, input UpdateUserByUserIDInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByUserID", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByUserID indicates an expected call of UpdateUserByUserID.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateUserByUserID(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByUserID", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateUserByUserID), ctx, input)
}
